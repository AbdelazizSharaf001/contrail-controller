#
# Copyright (c) 2013 Juniper Networks, Inc. All rights reserved.
#

# -*- mode: python; -*-

import sys
Import('AgentEnv')
env = AgentEnv.Clone()

# Generate the sandesh UVE source files
SandeshGenPyFiles  = env.SandeshGenPy('vrouter.sandesh')

setup_sources = [
           'setup.py',
           'MANIFEST.in',
          ]

setup_sources_rules = []
for file in setup_sources:
    setup_sources_rules.append(env.Install("", "#controller/src/vnsw/agent/uve/" + file))

sandesh_dirs = ['vrouter']
for file in sandesh_dirs:
    Dir(env['TOP'] + '/vnsw/agent/uve/gen_py/' + file)
sandesh_files = sandesh_dirs
sandesh_sources = ['gen_py/' + ssrc for ssrc in sandesh_files]
sandesh_sources_rules = []
for file in sandesh_sources:
    sandesh_sources_rules.append(env.Install("vrouter", env['TOP'] + "/vnsw/agent/uve/" + file))
env.Depends(sandesh_sources_rules, env['TOP'] + '/vnsw/agent/uve/gen_py/')

sandesh_init_rules = [env.Install("vrouter", env['TOP'] + "/vnsw/agent/uve/gen_py/__init__.py")]
env.Requires(sandesh_init_rules, sandesh_sources_rules)

# Generate the sandesh cpuinfo from base
sandesh_base_gen_py_files = env.SandeshGenPy('#controller/src/base/sandesh/cpuinfo.sandesh')
sandesh_base_dirs = [ 'cpuinfo' ]
for file in sandesh_base_dirs:
    Dir(env['TOP'] + '/vnsw/agent/uve/gen_py/' + file)
sandesh_base_files = sandesh_base_dirs
sandesh_base_sources = ['gen_py/' + ssrc for ssrc in sandesh_base_files]
sandesh_base_sources_rules = []
for file in sandesh_base_sources:
    sandesh_base_sources_rules.append(env.Install("vrouter/vrouter", env['TOP'] + "/vnsw/agent/uve/" + file))
env.Requires(sandesh_base_sources_rules, sandesh_base_gen_py_files)
env.Requires(sandesh_base_sources_rules, Dir(env['TOP'] + '/base/sandesh/gen_py/'))

rel_path = Dir('vrouter').path
def BuildInfoAction(target, source, env):
    env.GenerateBuildInfoPyCode(path=rel_path)
    
build_info_rules = [env.Command(target='buildinfo.py', source = None, action=BuildInfoAction)]

sdist_depends = []
sdist_depends.extend(setup_sources_rules)
sdist_depends.extend(sandesh_sources_rules)
sdist_depends.extend(sandesh_init_rules)
sdist_depends.extend(sandesh_base_sources_rules)
sdist_depends.extend(build_info_rules)
sdist_gen = env.Command('dist', 'setup.py', 'python setup.py sdist', chdir=1)

env.Depends(sdist_gen, sdist_depends)
env.Default(sdist_gen)

# Generate the C++ source files
SandeshGenFiles  = env.SandeshGenCpp('port_bmap.sandesh')
SandeshGenFiles += env.SandeshGenCpp('vrouter.sandesh')
SandeshGenFiles += env.SandeshGenCpp('virtual_machine.sandesh')
SandeshGenFiles += env.SandeshGenCpp('virtual_network.sandesh')
SandeshGenFiles += env.SandeshGenCpp('acl.sandesh')
SandeshGenFiles += env.SandeshGenCpp('stats_interval.sandesh')

SandeshGenSrcs = env.ExtractCpp(SandeshGenFiles)
SandeshGenObjs = env.Object(SandeshGenSrcs)

libagentuve = env.Library('agentuve',
                         SandeshGenObjs +
                         ['agent_stats_collector.cc',
                          'agent_stats_sandesh_context.cc',
                          'drop_stats_io_context.cc',
                          'flow_stats_collector.cc',
                          'l4_port_bitmap.cc',
                          'interface_stats_io_context.cc',
                          'agent_uve.cc',
                          'vm_uve_entry.cc',
                          'vm_uve_table.cc',
                          'vm_stat.cc',
                          'vn_uve_entry.cc',
                          'vn_uve_table.cc',
                          'vrf_stats_io_context.cc',
                          'vrouter_stats_collector.cc',
                          'vrouter_uve_entry.cc',
                          'agent_uve_test.cc',
                          'vm_uve_table_test.cc',
                          'vn_uve_table_test.cc',
                          'vrouter_uve_entry_test.cc',
                          ])

env.SConscript('test/SConscript', exports='AgentEnv', duplicate=0)
