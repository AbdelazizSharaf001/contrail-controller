#
# Copyright (c) 2013 Juniper Networks, Inc. All rights reserved.
#

# -*- mode: python; -*-

Import('BuildEnv')
import sys

def MapBuildDir(list):
    return map(lambda x: '#/' + Dir('.').path + '/../' + x, list)

env = BuildEnv.Clone()

libcontrol_node = env.Library('control_node', ['control_node.cc'])

env.Append(CPPPATH = [env['TOP'] + '/base/sandesh'])
env.Append(CPPPATH = [env['TOP'] + '/ifmap'])
env.Append(CPPPATH = [env['TOP'] + '/bgp'])
ControlNodeSandeshGenFiles = env.SandeshGenCpp('sandesh/control_node.sandesh')
ControlNodeSandeshGenSrcs = env.ExtractCpp(ControlNodeSandeshGenFiles)

control_node_sandesh_files_ = []
for src in ControlNodeSandeshGenSrcs:
    objname = src.replace('.cpp', '.o')
    obj = env.Object(objname, src)
    control_node_sandesh_files_.append(obj)

env.Prepend(LIBS=['bgp',
                  'bgp_schema',
                  'bgp_l3vpn_unicast',
                  'bgp_l3vpn_multicast',
                  'bgp_l3vpn_multicast_msg',
                  'xmpp_enet',
                  'control_node',
                  'peer_sandesh',
                  'routing_instance',
                  'rtarget',
                  'security_group',
                  'tunnel_encap',
                  'ifmap_vnc',
                  'ifmap_server',
                  'ifmap_common',
                  'route',
                  'net',
                  'ds',
                  'ifmapio',
                  'xmpp',
                  'xml',
                  'sandeshvns',
                  'sandesh',
                  'httpc',
                  'http',
                  'http_parser',
                  'curl',
                  'db',
                  'io',
                  'base',
                  'cpuinfo',
                  'pugixml',
                  'libxml2',
                  'boost_regex',
                  'boost_program_options',
                  'boost_filesystem',
                  'crypto', 'ssl'])

if sys.platform != 'darwin':
    env.Append(LIBS=['rt'])

libs = MapBuildDir(['base',
                    'bgp',
                    'bgp/inet',
                    'bgp/inetmcast',
                    'bgp/enet',
                    'bgp/evpn',
                    'bgp/l3vpn',
                    'bgp/routing-instance',
                    'bgp/rtarget',
                    'bgp/security_group',
                    'bgp/tunnel_encap',
                    'control-node',
                    'db',
                    'ifmap',
                    'io', 
                    'net',
                    'route',
                    'xmpp',
                    'xml',
                    'discovery/client',
                    'http/client'])

env.Append(LIBPATH=libs)
env.Append(LIBPATH = env['TOP'] + '/schema')
env.Append(CPPPATH = env['TOP'])
env.Append(CPPPATH = env['TOP'] + '/control-node')
env.Append(CPPPATH = env['TOP'] + '/discovery/client')

lib_l3vpn = File('../bgp/l3vpn/libbgp_l3vpn.a')
lib_inet = File('../bgp/inet/libbgp_inet.a')
lib_inetmcast = File('../bgp/inetmcast/libbgp_inetmcast.a')
lib_enet = File('../bgp/enet/libbgp_enet.a')
lib_evpn = File('../bgp/evpn/libbgp_evpn.a')
lib_ifmap_server = File('../ifmap/libifmap_server.a')
lib_sandesh = File('../sandesh/library/cpp/libsandesh.a')
lib_cpuinfo = File('../base/libcpuinfo.a')

if sys.platform != 'darwin':
    env.Prepend(LINKFLAGS =
                     ['-Wl,--whole-archive',
                      '-lbgp_l3vpn', '-lbgp_inet', '-lbgp_inetmcast',
                      '-lbgp_enet', '-lbgp_evpn',
                      '-lifmap_server', '-lcpuinfo',
                      '-Wl,--no-whole-archive'])
else:
    env.Prepend(LINKFLAGS = ['-Wl,-force_load,' + lib_l3vpn.path])
    env.Prepend(LINKFLAGS = ['-Wl,-force_load,' + lib_inet.path])
    env.Prepend(LINKFLAGS = ['-Wl,-force_load,' + lib_inetmcast.path])
    env.Prepend(LINKFLAGS = ['-Wl,-force_load,' + lib_enet.path])
    env.Prepend(LINKFLAGS = ['-Wl,-force_load,' + lib_evpn.path])
    env.Prepend(LINKFLAGS = ['-Wl,-force_load,' + lib_ifmap_server.path])
    env.Prepend(LINKFLAGS = ['-Wl,-force_load,' + lib_sandesh.path])
    env.Prepend(LINKFLAGS = ['-Wl,-force_load,' + lib_cpuinfo.path])

buildinfo_dep_libs = ['../bgp/libbgp.a', '../schema/libbgp_schema.a', '../schema/libbgp_l3vpn_unicast.a', 
                      '../schema/libbgp_l3vpn_multicast.a', '../schema/libbgp_l3vpn_multicast_msg.a', 
                      '../control-node/libcontrol_node.a', '../bgp/routing-instance/librouting_instance.a', 
                      '../bgp/rtarget/librtarget.a', '../bgp/security_group/libsecurity_group.a', '../schema/libifmap_vnc.a', 
                      '../ifmap/libifmap_server.a', '../ifmap/libifmap_common.a', '../route/libroute.a', '../net/libnet.a', 
                      '../../lib/libifmapio.a', '../xmpp/libxmpp.a', '../xml/libxml.a', '../../lib/libsandeshvns.a', 
                      '../../lib/libsandesh.a', '../../lib/libhttp.a', '../../lib/libhttp_parser.a', '../../lib/libcurl.a', 
                      '../db/libdb.a', '../io/libio.a', '../base/libbase.a', '../base/libcpuinfo.a', '../../lib/libpugixml.a', 
                      '../../lib/libxml2.a', '../../lib/libboost_regex.a', '../../lib/libboost_program_options.a', 
                      '../../lib/libboost_filesystem.a', '../../lib/libboost_system.a', '../../lib/liblog4cplus.a']

if sys.platform != 'darwin':
    buildinfo_dep_libs += [ '../../lib/libtbb_debug.so.2' ]

rel_path = Dir('.').path
def BuildInfoAction(target, source, env):
    env.GenerateBuildInfoCode(path=rel_path)

env.Command(target='buildinfo.cc', source = ControlNodeSandeshGenSrcs + buildinfo_dep_libs + ['main.cc', 'sandesh/control_node_sandesh.cc'],
                                   action=BuildInfoAction)
env.Depends('main.o', 'buildinfo.cc')

ctrlnode = env.Program(target = 'control-node',
                       source = ['buildinfo.cc',
                                 'main.cc',
                                 'sandesh/control_node_sandesh.cc'] +
                                 control_node_sandesh_files_)

env.Default(ctrlnode)

env.Depends(ctrlnode, lib_l3vpn)
env.Depends(ctrlnode, lib_inet)
env.Depends(ctrlnode, lib_inetmcast)
env.Depends(ctrlnode, lib_enet)
env.Depends(ctrlnode, lib_evpn)
env.Depends(ctrlnode, lib_ifmap_server)

env.Alias('control-node', ctrlnode)

env.SConscript('test/SConscript', exports='BuildEnv', duplicate = 0)
